{"version":3,"sources":["node_modules/browser-pack/_prelude.js","assets/js/main.js","node_modules/colby-bootstrap/js/fit-parent-to-child.js","node_modules/colby-bootstrap/js/menu-handler.js","node_modules/lodash/_Symbol.js","node_modules/lodash/_baseGetTag.js","node_modules/lodash/_freeGlobal.js","node_modules/lodash/_getRawTag.js","node_modules/lodash/_objectToString.js","node_modules/lodash/_root.js","node_modules/lodash/debounce.js","node_modules/lodash/isObject.js","node_modules/lodash/isObjectLike.js","node_modules/lodash/isSymbol.js","node_modules/lodash/now.js","node_modules/lodash/toNumber.js","node_modules/vanilla-lazyload/dist/lazyload.min.js"],"names":[],"mappings":"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7BkB,W;;;ACArB;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AC5BA;AACA;AACA;AACA;AACA;;;;ACJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC9CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtvBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClEA;AACA","file":"lunder-institute.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","import LazyLoad from 'vanilla-lazyload';\nimport MenuHandler from 'colby-bootstrap/js/menu-handler';\nimport fitParentToChild from 'colby-bootstrap/js/fit-parent-to-child';\nimport debounce from 'lodash/debounce';\n\nconst lazyload = new LazyLoad();\nconst splashTimeout = 3000;\nconst galleryInterval = 4000;\n\nwindow.addEventListener('load', handleSplash);\nwindow.addEventListener('load', () => new GalleryHandler());\nwindow.addEventListener('load', fixSVGs);\n\nfunction handleSplash() {\n  const splash = document.querySelector('.front-page-splash');\n\n  const simpleFooter = document.querySelector('.simple-footer');\n  const splashText = document.querySelector('.front-page-splash__text');\n  const splashBackground = document.querySelector(\n    '.front-page-splash__background'\n  );\n  const header = document.querySelector('.three-column-header');\n\n  if (!splash) {\n    return document.querySelector('body').style.opacity = '1';\n  }\n\n  document.querySelector('body').style.opacity = '1';\n  setTimeout(\n    () => {\n      splash.style.opacity = '0';\n    },\n\n    splashTimeout\n  );\n  setTimeout(\n    () => {\n      splash.style.height = '0';\n      splash.style['pointer-events'] = 'none';\n    },\n\n    splashTimeout + 1000\n  );\n}\n\nclass GalleryHandler {\n  constructor() {\n    this.gallery = document.querySelector('.front-page-gallery');\n    this.titles = document.querySelectorAll('[class*=title-]');\n    this.images = document.querySelectorAll('.front-page-gallery__images img');\n    this.imagesContainer = document.querySelector(\n      '.front-page-gallery__images'\n    );\n\n    this.run = this.run.bind(this);\n    this.handleActiveIndex = this.handleActiveIndex.bind(this);\n\n    if (this.gallery && this.titles && this.images) {\n      this.activeIndex = -1;\n      this.run();\n    }\n  }\n\n  run() {\n    setTimeout(\n      () => {\n        this.gallery.classList.remove('pre-load');\n        this.handleActiveIndex();\n        setInterval(this.handleActiveIndex, galleryInterval);\n        this.gallery.style.opacity = '1';\n      },\n\n      splashTimeout\n    );\n  }\n\n  handleActiveIndex() {\n    this.activeIndex++;\n\n    if (this.activeIndex >= this.images.length) {\n      this.activeIndex = 0;\n    }\n\n    [].forEach.call(\n      document.querySelectorAll(`.front-page-gallery__titles > span`),\n      span => {\n        span.style['font-weight'] = '';\n        span.style.opacity = '';\n      }\n    );\n\n    [].forEach.call(\n      document.querySelectorAll(`.title-${this.activeIndex}`),\n      span => {\n        span.style['font-weight'] = '900';\n        span.style.opacity = 1;\n      }\n    );\n\n    [].forEach.call(\n      this.images,\n      image => image.classList.remove('front-page-gallery__active-image')\n    );\n\n    this.images[this.activeIndex].classList.add(\n      'front-page-gallery__active-image'\n    );\n  }\n}\n\nwindow.addEventListener('load', () => {\n  const menuIcon = document.querySelector('.menu-icon-container');\n  const menus = document.querySelectorAll(\n    '.three-column-header__collapsible-columns'\n  );\n\n  if (!menuIcon && !menus) {\n    return;\n  }\n\n  menuIcon.addEventListener('click', event => {\n    event.preventDefault();\n\n    menuIcon.classList.toggle('active');\n    [...menus].forEach(menu => menu.classList.toggle('mobile-active'));\n  });\n});\n\nwindow.addEventListener(\n  'load',\n  () =>\n    new MenuHandler({\n      parentSelector: '.menu-item-has-children',\n      submenuSelector: '.sub-menu',\n    })\n);\n\nwindow.addEventListener('load', () => {\n  const text = document.querySelector('.front-page-gallery__titles');\n});\n\nfunction fixSVGs() {\n  const svgs = document.querySelectorAll('svg');\n\n  if (!svgs) {\n    return;\n  }\n\n  let fixIt = svg => {\n    let height = svg.getAttribute('height');\n    let width = svg.getAttribute('width');\n\n    if (!height || !width) {\n      return;\n    }\n\n    width = Number(width.replace('px', ''));\n    height = Number(height.replace('px', ''));\n\n    const ratio = height / width;\n    const computedHeight = svg.clientWidth * ratio;\n    console.log(width, height, ratio);\n\n    svg.style.height = `${computedHeight}px`;\n  };\n\n  let fixThem = () => {\n    [].forEach.call(svgs, fixIt);\n  };\n\n  fixThem();\n  fixThem = debounce(fixThem, 100);\n  window.addEventListener('resize', fixThem);\n}\n\nwindow.addEventListener('load', () => {\n  fitParentToChild({\n    parentSelector: '.front-page-gallery',\n    childSelector: '.front-page-gallery__images img',\n  });\n});\n","import debounce from 'lodash/debounce';\n\n/**\n * Set the height of an HTML element to that of a child element.\n */\nexport default function fitParentToChild(settings) {\n  if (!settings.parentSelector || !settings.childSelector) {\n    return;\n  }\n\n  const containers = document.querySelectorAll(settings.parentSelector);\n\n  if (!containers) {\n    return;\n  }\n\n  [ ...containers ].forEach(container => {\n    let child = container.querySelector(settings.childSelector);\n\n    if (!child || !container) {\n      return;\n    }\n\n    const matchHeight = () =>\n      container.style.height = `${child.clientHeight}px`;\n\n    matchHeight();\n\n    window.addEventListener('resize', debounce(matchHeight, 100));\n  });\n}\n","export default class MenuHandler {\n  constructor(settings) {\n    this.settings = settings;\n    this.handleParentHover = this.handleParentHover.bind(this);\n\n    const parents = document.querySelectorAll(settings.parentSelector);\n    [ ...parents ].forEach(this.handleParentHover);\n  }\n\n  handleParentHover(parent) {\n    if (window.innerWidth <= 768) {\n      return;\n    }\n\n    const child = parent.querySelector(this.settings.submenuSelector);\n\n    if (!child) {\n      return;\n    }\n\n    const toggle = () => {\n      child.classList.toggle('visible');\n      child.style['width'] = `${parent.clientWidth + 24}px`;\n      child.style['min-width'] = '200px';\n    };\n    const childLinks = child.querySelectorAll('a');\n\n    parent.addEventListener('mouseenter', toggle);\n    parent.addEventListener('mouseleave', toggle);\n  }\n}\n","var root = require('./_root');\n\n/** Built-in value references. */\nvar Symbol = root.Symbol;\n\nmodule.exports = Symbol;\n","var Symbol = require('./_Symbol'),\n    getRawTag = require('./_getRawTag'),\n    objectToString = require('./_objectToString');\n\n/** `Object#toString` result references. */\nvar nullTag = '[object Null]',\n    undefinedTag = '[object Undefined]';\n\n/** Built-in value references. */\nvar symToStringTag = Symbol ? Symbol.toStringTag : undefined;\n\n/**\n * The base implementation of `getTag` without fallbacks for buggy environments.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nfunction baseGetTag(value) {\n  if (value == null) {\n    return value === undefined ? undefinedTag : nullTag;\n  }\n  return (symToStringTag && symToStringTag in Object(value))\n    ? getRawTag(value)\n    : objectToString(value);\n}\n\nmodule.exports = baseGetTag;\n","/** Detect free variable `global` from Node.js. */\nvar freeGlobal = typeof global == 'object' && global && global.Object === Object && global;\n\nmodule.exports = freeGlobal;\n","var Symbol = require('./_Symbol');\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar nativeObjectToString = objectProto.toString;\n\n/** Built-in value references. */\nvar symToStringTag = Symbol ? Symbol.toStringTag : undefined;\n\n/**\n * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the raw `toStringTag`.\n */\nfunction getRawTag(value) {\n  var isOwn = hasOwnProperty.call(value, symToStringTag),\n      tag = value[symToStringTag];\n\n  try {\n    value[symToStringTag] = undefined;\n    var unmasked = true;\n  } catch (e) {}\n\n  var result = nativeObjectToString.call(value);\n  if (unmasked) {\n    if (isOwn) {\n      value[symToStringTag] = tag;\n    } else {\n      delete value[symToStringTag];\n    }\n  }\n  return result;\n}\n\nmodule.exports = getRawTag;\n","/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar nativeObjectToString = objectProto.toString;\n\n/**\n * Converts `value` to a string using `Object.prototype.toString`.\n *\n * @private\n * @param {*} value The value to convert.\n * @returns {string} Returns the converted string.\n */\nfunction objectToString(value) {\n  return nativeObjectToString.call(value);\n}\n\nmodule.exports = objectToString;\n","var freeGlobal = require('./_freeGlobal');\n\n/** Detect free variable `self`. */\nvar freeSelf = typeof self == 'object' && self && self.Object === Object && self;\n\n/** Used as a reference to the global object. */\nvar root = freeGlobal || freeSelf || Function('return this')();\n\nmodule.exports = root;\n","var isObject = require('./isObject'),\n    now = require('./now'),\n    toNumber = require('./toNumber');\n\n/** Error message constants. */\nvar FUNC_ERROR_TEXT = 'Expected a function';\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeMax = Math.max,\n    nativeMin = Math.min;\n\n/**\n * Creates a debounced function that delays invoking `func` until after `wait`\n * milliseconds have elapsed since the last time the debounced function was\n * invoked. The debounced function comes with a `cancel` method to cancel\n * delayed `func` invocations and a `flush` method to immediately invoke them.\n * Provide `options` to indicate whether `func` should be invoked on the\n * leading and/or trailing edge of the `wait` timeout. The `func` is invoked\n * with the last arguments provided to the debounced function. Subsequent\n * calls to the debounced function return the result of the last `func`\n * invocation.\n *\n * **Note:** If `leading` and `trailing` options are `true`, `func` is\n * invoked on the trailing edge of the timeout only if the debounced function\n * is invoked more than once during the `wait` timeout.\n *\n * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred\n * until to the next tick, similar to `setTimeout` with a timeout of `0`.\n *\n * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)\n * for details over the differences between `_.debounce` and `_.throttle`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Function\n * @param {Function} func The function to debounce.\n * @param {number} [wait=0] The number of milliseconds to delay.\n * @param {Object} [options={}] The options object.\n * @param {boolean} [options.leading=false]\n *  Specify invoking on the leading edge of the timeout.\n * @param {number} [options.maxWait]\n *  The maximum time `func` is allowed to be delayed before it's invoked.\n * @param {boolean} [options.trailing=true]\n *  Specify invoking on the trailing edge of the timeout.\n * @returns {Function} Returns the new debounced function.\n * @example\n *\n * // Avoid costly calculations while the window size is in flux.\n * jQuery(window).on('resize', _.debounce(calculateLayout, 150));\n *\n * // Invoke `sendMail` when clicked, debouncing subsequent calls.\n * jQuery(element).on('click', _.debounce(sendMail, 300, {\n *   'leading': true,\n *   'trailing': false\n * }));\n *\n * // Ensure `batchLog` is invoked once after 1 second of debounced calls.\n * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });\n * var source = new EventSource('/stream');\n * jQuery(source).on('message', debounced);\n *\n * // Cancel the trailing debounced invocation.\n * jQuery(window).on('popstate', debounced.cancel);\n */\nfunction debounce(func, wait, options) {\n  var lastArgs,\n      lastThis,\n      maxWait,\n      result,\n      timerId,\n      lastCallTime,\n      lastInvokeTime = 0,\n      leading = false,\n      maxing = false,\n      trailing = true;\n\n  if (typeof func != 'function') {\n    throw new TypeError(FUNC_ERROR_TEXT);\n  }\n  wait = toNumber(wait) || 0;\n  if (isObject(options)) {\n    leading = !!options.leading;\n    maxing = 'maxWait' in options;\n    maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;\n    trailing = 'trailing' in options ? !!options.trailing : trailing;\n  }\n\n  function invokeFunc(time) {\n    var args = lastArgs,\n        thisArg = lastThis;\n\n    lastArgs = lastThis = undefined;\n    lastInvokeTime = time;\n    result = func.apply(thisArg, args);\n    return result;\n  }\n\n  function leadingEdge(time) {\n    // Reset any `maxWait` timer.\n    lastInvokeTime = time;\n    // Start the timer for the trailing edge.\n    timerId = setTimeout(timerExpired, wait);\n    // Invoke the leading edge.\n    return leading ? invokeFunc(time) : result;\n  }\n\n  function remainingWait(time) {\n    var timeSinceLastCall = time - lastCallTime,\n        timeSinceLastInvoke = time - lastInvokeTime,\n        result = wait - timeSinceLastCall;\n\n    return maxing ? nativeMin(result, maxWait - timeSinceLastInvoke) : result;\n  }\n\n  function shouldInvoke(time) {\n    var timeSinceLastCall = time - lastCallTime,\n        timeSinceLastInvoke = time - lastInvokeTime;\n\n    // Either this is the first call, activity has stopped and we're at the\n    // trailing edge, the system time has gone backwards and we're treating\n    // it as the trailing edge, or we've hit the `maxWait` limit.\n    return (lastCallTime === undefined || (timeSinceLastCall >= wait) ||\n      (timeSinceLastCall < 0) || (maxing && timeSinceLastInvoke >= maxWait));\n  }\n\n  function timerExpired() {\n    var time = now();\n    if (shouldInvoke(time)) {\n      return trailingEdge(time);\n    }\n    // Restart the timer.\n    timerId = setTimeout(timerExpired, remainingWait(time));\n  }\n\n  function trailingEdge(time) {\n    timerId = undefined;\n\n    // Only invoke if we have `lastArgs` which means `func` has been\n    // debounced at least once.\n    if (trailing && lastArgs) {\n      return invokeFunc(time);\n    }\n    lastArgs = lastThis = undefined;\n    return result;\n  }\n\n  function cancel() {\n    if (timerId !== undefined) {\n      clearTimeout(timerId);\n    }\n    lastInvokeTime = 0;\n    lastArgs = lastCallTime = lastThis = timerId = undefined;\n  }\n\n  function flush() {\n    return timerId === undefined ? result : trailingEdge(now());\n  }\n\n  function debounced() {\n    var time = now(),\n        isInvoking = shouldInvoke(time);\n\n    lastArgs = arguments;\n    lastThis = this;\n    lastCallTime = time;\n\n    if (isInvoking) {\n      if (timerId === undefined) {\n        return leadingEdge(lastCallTime);\n      }\n      if (maxing) {\n        // Handle invocations in a tight loop.\n        timerId = setTimeout(timerExpired, wait);\n        return invokeFunc(lastCallTime);\n      }\n    }\n    if (timerId === undefined) {\n      timerId = setTimeout(timerExpired, wait);\n    }\n    return result;\n  }\n  debounced.cancel = cancel;\n  debounced.flush = flush;\n  return debounced;\n}\n\nmodule.exports = debounce;\n","/**\n * Checks if `value` is the\n * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n * @example\n *\n * _.isObject({});\n * // => true\n *\n * _.isObject([1, 2, 3]);\n * // => true\n *\n * _.isObject(_.noop);\n * // => true\n *\n * _.isObject(null);\n * // => false\n */\nfunction isObject(value) {\n  var type = typeof value;\n  return value != null && (type == 'object' || type == 'function');\n}\n\nmodule.exports = isObject;\n","/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike(value) {\n  return value != null && typeof value == 'object';\n}\n\nmodule.exports = isObjectLike;\n","var baseGetTag = require('./_baseGetTag'),\n    isObjectLike = require('./isObjectLike');\n\n/** `Object#toString` result references. */\nvar symbolTag = '[object Symbol]';\n\n/**\n * Checks if `value` is classified as a `Symbol` primitive or object.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.\n * @example\n *\n * _.isSymbol(Symbol.iterator);\n * // => true\n *\n * _.isSymbol('abc');\n * // => false\n */\nfunction isSymbol(value) {\n  return typeof value == 'symbol' ||\n    (isObjectLike(value) && baseGetTag(value) == symbolTag);\n}\n\nmodule.exports = isSymbol;\n","var root = require('./_root');\n\n/**\n * Gets the timestamp of the number of milliseconds that have elapsed since\n * the Unix epoch (1 January 1970 00:00:00 UTC).\n *\n * @static\n * @memberOf _\n * @since 2.4.0\n * @category Date\n * @returns {number} Returns the timestamp.\n * @example\n *\n * _.defer(function(stamp) {\n *   console.log(_.now() - stamp);\n * }, _.now());\n * // => Logs the number of milliseconds it took for the deferred invocation.\n */\nvar now = function() {\n  return root.Date.now();\n};\n\nmodule.exports = now;\n","var isObject = require('./isObject'),\n    isSymbol = require('./isSymbol');\n\n/** Used as references for various `Number` constants. */\nvar NAN = 0 / 0;\n\n/** Used to match leading and trailing whitespace. */\nvar reTrim = /^\\s+|\\s+$/g;\n\n/** Used to detect bad signed hexadecimal string values. */\nvar reIsBadHex = /^[-+]0x[0-9a-f]+$/i;\n\n/** Used to detect binary string values. */\nvar reIsBinary = /^0b[01]+$/i;\n\n/** Used to detect octal string values. */\nvar reIsOctal = /^0o[0-7]+$/i;\n\n/** Built-in method references without a dependency on `root`. */\nvar freeParseInt = parseInt;\n\n/**\n * Converts `value` to a number.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to process.\n * @returns {number} Returns the number.\n * @example\n *\n * _.toNumber(3.2);\n * // => 3.2\n *\n * _.toNumber(Number.MIN_VALUE);\n * // => 5e-324\n *\n * _.toNumber(Infinity);\n * // => Infinity\n *\n * _.toNumber('3.2');\n * // => 3.2\n */\nfunction toNumber(value) {\n  if (typeof value == 'number') {\n    return value;\n  }\n  if (isSymbol(value)) {\n    return NAN;\n  }\n  if (isObject(value)) {\n    var other = typeof value.valueOf == 'function' ? value.valueOf() : value;\n    value = isObject(other) ? (other + '') : other;\n  }\n  if (typeof value != 'string') {\n    return value === 0 ? value : +value;\n  }\n  value = value.replace(reTrim, '');\n  var isBinary = reIsBinary.test(value);\n  return (isBinary || reIsOctal.test(value))\n    ? freeParseInt(value.slice(2), isBinary ? 2 : 8)\n    : (reIsBadHex.test(value) ? NAN : +value);\n}\n\nmodule.exports = toNumber;\n","!function(a,b){\"function\"==typeof define&&define.amd?define([],b):\"object\"==typeof exports?module.exports=b():a.LazyLoad=b()}(this,function(){function a(){r||(n={elements_selector:\"img\",container:window,threshold:300,throttle:50,data_src:\"original\",data_srcset:\"original-set\",class_loading:\"loading\",class_loaded:\"loaded\",skip_invisible:!0,callback_load:null,callback_error:null,callback_set:null,callback_processed:null},o=!!window.addEventListener,p=!!window.attachEvent,q=!!document.body.classList,r=!0)}function b(a,b,c){return o?void a.addEventListener(b,c):void(p&&(a.attachEvent(\"on\"+b,function(a){return function(){c.call(a,window.event)}}(a)),a=null))}function c(a,b,c){return o?void a.removeEventListener(b,c):void(p&&a.detachEvent(\"on\"+b,c))}function d(a,b,c){function d(){return window.innerWidth||l.documentElement.clientWidth||document.body.clientWidth}function e(){return window.innerHeight||l.documentElement.clientHeight||document.body.clientHeight}function f(a){return a.getBoundingClientRect().top+m-l.documentElement.clientTop}function g(a){return a.getBoundingClientRect().left+n-l.documentElement.clientLeft}function h(){var d;return d=b===window?e()+m:f(b)+b.offsetHeight,d<=f(a)-c}function i(){var e;return e=b===window?d()+window.pageXOffset:g(b)+d(),e<=g(a)-c}function j(){var d;return d=b===window?m:f(b),d>=f(a)+c+a.offsetHeight}function k(){var d;return d=b===window?n:g(b),d>=g(a)+c+a.offsetWidth}var l,m,n;return l=a.ownerDocument,m=window.pageYOffset||l.body.scrollTop,n=window.pageXOffset||l.body.scrollLeft,!(h()||j()||i()||k())}function e(){var a=new Date;return a.getTime()}function f(a,b){var c,d={};for(c in a)a.hasOwnProperty(c)&&(d[c]=a[c]);for(c in b)b.hasOwnProperty(c)&&(d[c]=b[c]);return d}function g(a){try{return Array.prototype.slice.call(a)}catch(b){var c,d=[],e=a.length;for(c=0;e>c;c++)d.push(a[c]);return d}}function h(a,b){return q?void a.classList.add(b):void(a.className+=(a.className?\" \":\"\")+b)}function i(a,b){return q?void a.classList.remove(b):void(a.className=a.className.replace(new RegExp(\"(^|\\\\s+)\"+b+\"(\\\\s+|$)\"),\" \").replace(/^\\s+/,\"\").replace(/\\s+$/,\"\"))}function j(a,b){var c=a.parentElement;if(\"PICTURE\"===c.tagName)for(var d=0;d<c.children.length;d++){var e=c.children[d];if(\"SOURCE\"===e.tagName){var f=e.getAttribute(\"data-\"+b);f&&e.setAttribute(\"srcset\",f)}}}function k(a,b,c){var d=a.tagName,e=a.getAttribute(\"data-\"+c);if(\"IMG\"===d){j(a,b);var f=a.getAttribute(\"data-\"+b);return f&&a.setAttribute(\"srcset\",f),void(e&&a.setAttribute(\"src\",e))}return\"IFRAME\"===d?void(e&&a.setAttribute(\"src\",e)):void(a.style.backgroundImage=\"url(\"+e+\")\")}function l(a,b){return function(){return a.apply(b,arguments)}}function m(c){a(),this._settings=f(n,c),this._queryOriginNode=this._settings.container===window?document:this._settings.container,this._previousLoopTime=0,this._loopTimeout=null,this._handleScrollFn=l(this.handleScroll,this),b(window,\"resize\",this._handleScrollFn),this.update()}var n,o,p,q,r=!1;return m.prototype._showOnAppear=function(a){function d(){null!==e&&(e.callback_load&&e.callback_load(a),i(a,e.class_loading),h(a,e.class_loaded),c(a,\"load\",d))}var e=this._settings;(\"IMG\"===a.tagName||\"IFRAME\"===a.tagName)&&(b(a,\"load\",d),b(a,\"error\",function(){c(a,\"load\",d),i(a,e.class_loading),e.callback_error&&e.callback_error(a)}),h(a,e.class_loading)),k(a,e.data_srcset,e.data_src),e.callback_set&&e.callback_set(a)},m.prototype._loopThroughElements=function(){var a,b,c=this._settings,e=this._elements,f=e?e.length:0,g=[];for(a=0;f>a;a++)b=e[a],c.skip_invisible&&null===b.offsetParent||d(b,c.container,c.threshold)&&(this._showOnAppear(b),g.push(a),b.wasProcessed=!0);for(;g.length>0;)e.splice(g.pop(),1),c.callback_processed&&c.callback_processed(e.length);0===f&&this._stopScrollHandler()},m.prototype._purgeElements=function(){var a,b,c=this._elements,d=c.length,e=[];for(a=0;d>a;a++)b=c[a],b.wasProcessed&&e.push(a);for(;e.length>0;)c.splice(e.pop(),1)},m.prototype._startScrollHandler=function(){this._isHandlingScroll||(this._isHandlingScroll=!0,b(this._settings.container,\"scroll\",this._handleScrollFn))},m.prototype._stopScrollHandler=function(){this._isHandlingScroll&&(this._isHandlingScroll=!1,c(this._settings.container,\"scroll\",this._handleScrollFn))},m.prototype.handleScroll=function(){var a,b,c;this._settings&&(b=e(),c=this._settings.throttle,0!==c?(a=c-(b-this._previousLoopTime),0>=a||a>c?(this._loopTimeout&&(clearTimeout(this._loopTimeout),this._loopTimeout=null),this._previousLoopTime=b,this._loopThroughElements()):this._loopTimeout||(this._loopTimeout=setTimeout(l(function(){this._previousLoopTime=e(),this._loopTimeout=null,this._loopThroughElements()},this),a))):this._loopThroughElements())},m.prototype.update=function(){this._elements=g(this._queryOriginNode.querySelectorAll(this._settings.elements_selector)),this._purgeElements(),this._loopThroughElements(),this._startScrollHandler()},m.prototype.destroy=function(){c(window,\"resize\",this._handleScrollFn),this._loopTimeout&&(clearTimeout(this._loopTimeout),this._loopTimeout=null),this._stopScrollHandler(),this._elements=null,this._queryOriginNode=null,this._settings=null},m});\n//# sourceMappingURL=lazyload.min.js.map"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}